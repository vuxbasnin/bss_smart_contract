/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace EyeMarketplace {
  export type ListDetailStruct = {
    author: AddressLike;
    price: BigNumberish;
    tokenId: BigNumberish;
  };

  export type ListDetailStructOutput = [
    author: string,
    price: bigint,
    tokenId: bigint
  ] & { author: string; price: bigint; tokenId: bigint };
}

export interface EyeMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyNFT"
      | "getListedNFT"
      | "listNFT"
      | "onERC721Received"
      | "owner"
      | "renounceOwnership"
      | "setNFT"
      | "setTax"
      | "setToken"
      | "transferOwnership"
      | "unListNFT"
      | "updateListingNFTPrice"
      | "withdraw"
      | "withdrawErc20"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BuyNFT"
      | "ListNFT"
      | "OwnershipTransferred"
      | "SetNFT"
      | "SetTax"
      | "SetToken"
      | "UnListNFT"
      | "UpdateListingNFTPrice"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListedNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listNFT",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setNFT", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setTax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unListNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListingNFTPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawErc20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getListedNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unListNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateListingNFTPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace BuyNFTEvent {
  export type InputTuple = [
    _from: AddressLike,
    _tokenId: BigNumberish,
    _price: BigNumberish
  ];
  export type OutputTuple = [_from: string, _tokenId: bigint, _price: bigint];
  export interface OutputObject {
    _from: string;
    _tokenId: bigint;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListNFTEvent {
  export type InputTuple = [
    _from: AddressLike,
    _tokenId: BigNumberish,
    _price: BigNumberish
  ];
  export type OutputTuple = [_from: string, _tokenId: bigint, _price: bigint];
  export interface OutputObject {
    _from: string;
    _tokenId: bigint;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetNFTEvent {
  export type InputTuple = [_nft: AddressLike];
  export type OutputTuple = [_nft: string];
  export interface OutputObject {
    _nft: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTaxEvent {
  export type InputTuple = [_tax: BigNumberish];
  export type OutputTuple = [_tax: bigint];
  export interface OutputObject {
    _tax: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTokenEvent {
  export type InputTuple = [_token: AddressLike];
  export type OutputTuple = [_token: string];
  export interface OutputObject {
    _token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnListNFTEvent {
  export type InputTuple = [_from: AddressLike, _tokenId: BigNumberish];
  export type OutputTuple = [_from: string, _tokenId: bigint];
  export interface OutputObject {
    _from: string;
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateListingNFTPriceEvent {
  export type InputTuple = [_tokenId: BigNumberish, _price: BigNumberish];
  export type OutputTuple = [_tokenId: bigint, _price: bigint];
  export interface OutputObject {
    _tokenId: bigint;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EyeMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): EyeMarketplace;
  waitForDeployment(): Promise<this>;

  interface: EyeMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyNFT: TypedContractMethod<
    [_tokenId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getListedNFT: TypedContractMethod<
    [],
    [EyeMarketplace.ListDetailStructOutput[]],
    "view"
  >;

  listNFT: TypedContractMethod<
    [_tokenId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setNFT: TypedContractMethod<[_nft: AddressLike], [void], "nonpayable">;

  setTax: TypedContractMethod<[_tax: BigNumberish], [void], "nonpayable">;

  setToken: TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unListNFT: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateListingNFTPrice: TypedContractMethod<
    [_tokenId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  withdrawErc20: TypedContractMethod<[], [void], "nonpayable">;

  withdrawToken: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyNFT"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getListedNFT"
  ): TypedContractMethod<[], [EyeMarketplace.ListDetailStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "listNFT"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNFT"
  ): TypedContractMethod<[_nft: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTax"
  ): TypedContractMethod<[_tax: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unListNFT"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateListingNFTPrice"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawErc20"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BuyNFT"
  ): TypedContractEvent<
    BuyNFTEvent.InputTuple,
    BuyNFTEvent.OutputTuple,
    BuyNFTEvent.OutputObject
  >;
  getEvent(
    key: "ListNFT"
  ): TypedContractEvent<
    ListNFTEvent.InputTuple,
    ListNFTEvent.OutputTuple,
    ListNFTEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetNFT"
  ): TypedContractEvent<
    SetNFTEvent.InputTuple,
    SetNFTEvent.OutputTuple,
    SetNFTEvent.OutputObject
  >;
  getEvent(
    key: "SetTax"
  ): TypedContractEvent<
    SetTaxEvent.InputTuple,
    SetTaxEvent.OutputTuple,
    SetTaxEvent.OutputObject
  >;
  getEvent(
    key: "SetToken"
  ): TypedContractEvent<
    SetTokenEvent.InputTuple,
    SetTokenEvent.OutputTuple,
    SetTokenEvent.OutputObject
  >;
  getEvent(
    key: "UnListNFT"
  ): TypedContractEvent<
    UnListNFTEvent.InputTuple,
    UnListNFTEvent.OutputTuple,
    UnListNFTEvent.OutputObject
  >;
  getEvent(
    key: "UpdateListingNFTPrice"
  ): TypedContractEvent<
    UpdateListingNFTPriceEvent.InputTuple,
    UpdateListingNFTPriceEvent.OutputTuple,
    UpdateListingNFTPriceEvent.OutputObject
  >;

  filters: {
    "BuyNFT(address,uint256,uint256)": TypedContractEvent<
      BuyNFTEvent.InputTuple,
      BuyNFTEvent.OutputTuple,
      BuyNFTEvent.OutputObject
    >;
    BuyNFT: TypedContractEvent<
      BuyNFTEvent.InputTuple,
      BuyNFTEvent.OutputTuple,
      BuyNFTEvent.OutputObject
    >;

    "ListNFT(address,uint256,uint256)": TypedContractEvent<
      ListNFTEvent.InputTuple,
      ListNFTEvent.OutputTuple,
      ListNFTEvent.OutputObject
    >;
    ListNFT: TypedContractEvent<
      ListNFTEvent.InputTuple,
      ListNFTEvent.OutputTuple,
      ListNFTEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetNFT(address)": TypedContractEvent<
      SetNFTEvent.InputTuple,
      SetNFTEvent.OutputTuple,
      SetNFTEvent.OutputObject
    >;
    SetNFT: TypedContractEvent<
      SetNFTEvent.InputTuple,
      SetNFTEvent.OutputTuple,
      SetNFTEvent.OutputObject
    >;

    "SetTax(uint256)": TypedContractEvent<
      SetTaxEvent.InputTuple,
      SetTaxEvent.OutputTuple,
      SetTaxEvent.OutputObject
    >;
    SetTax: TypedContractEvent<
      SetTaxEvent.InputTuple,
      SetTaxEvent.OutputTuple,
      SetTaxEvent.OutputObject
    >;

    "SetToken(address)": TypedContractEvent<
      SetTokenEvent.InputTuple,
      SetTokenEvent.OutputTuple,
      SetTokenEvent.OutputObject
    >;
    SetToken: TypedContractEvent<
      SetTokenEvent.InputTuple,
      SetTokenEvent.OutputTuple,
      SetTokenEvent.OutputObject
    >;

    "UnListNFT(address,uint256)": TypedContractEvent<
      UnListNFTEvent.InputTuple,
      UnListNFTEvent.OutputTuple,
      UnListNFTEvent.OutputObject
    >;
    UnListNFT: TypedContractEvent<
      UnListNFTEvent.InputTuple,
      UnListNFTEvent.OutputTuple,
      UnListNFTEvent.OutputObject
    >;

    "UpdateListingNFTPrice(uint256,uint256)": TypedContractEvent<
      UpdateListingNFTPriceEvent.InputTuple,
      UpdateListingNFTPriceEvent.OutputTuple,
      UpdateListingNFTPriceEvent.OutputObject
    >;
    UpdateListingNFTPrice: TypedContractEvent<
      UpdateListingNFTPriceEvent.InputTuple,
      UpdateListingNFTPriceEvent.OutputTuple,
      UpdateListingNFTPriceEvent.OutputObject
    >;
  };
}
