/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BSSCrowdSaleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BNB_rate"
      | "USDT_rate"
      | "buyTokenByBNB"
      | "buyTokenByUSDT"
      | "getTokenAmountBNB"
      | "getTokenAmountUSDT"
      | "owner"
      | "renounceOwnership"
      | "setBNBRate"
      | "setUSDTRate"
      | "setUSDTToken"
      | "token"
      | "transferOwnership"
      | "usdtToken"
      | "wallet"
      | "withdraw"
      | "withdrawErc20"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BuyTokenByBNB"
      | "BuyTokenByUSDT"
      | "OwnershipTransferred"
      | "SetBNBRate"
      | "SetUSDTRate"
      | "SetUSDTToken"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BNB_rate", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDT_rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyTokenByBNB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenByUSDT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmountBNB",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmountUSDT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBNBRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSDTRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSDTToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdtToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "wallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawErc20",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BNB_rate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDT_rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenByBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenByUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmountBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmountUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBNBRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUSDTRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSDTToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdtToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawErc20",
    data: BytesLike
  ): Result;
}

export namespace BuyTokenByBNBEvent {
  export type InputTuple = [_buyer: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_buyer: string, _amount: bigint];
  export interface OutputObject {
    _buyer: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyTokenByUSDTEvent {
  export type InputTuple = [_buyer: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_buyer: string, _amount: bigint];
  export interface OutputObject {
    _buyer: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBNBRateEvent {
  export type InputTuple = [_newRate: BigNumberish];
  export type OutputTuple = [_newRate: bigint];
  export interface OutputObject {
    _newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUSDTRateEvent {
  export type InputTuple = [_newRate: BigNumberish];
  export type OutputTuple = [_newRate: bigint];
  export interface OutputObject {
    _newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUSDTTokenEvent {
  export type InputTuple = [_tokenAddress: AddressLike];
  export type OutputTuple = [_tokenAddress: string];
  export interface OutputObject {
    _tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BSSCrowdSale extends BaseContract {
  connect(runner?: ContractRunner | null): BSSCrowdSale;
  waitForDeployment(): Promise<this>;

  interface: BSSCrowdSaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BNB_rate: TypedContractMethod<[], [bigint], "view">;

  USDT_rate: TypedContractMethod<[], [bigint], "view">;

  buyTokenByBNB: TypedContractMethod<[], [void], "payable">;

  buyTokenByUSDT: TypedContractMethod<
    [_usdtAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getTokenAmountBNB: TypedContractMethod<
    [_amount: BigNumberish],
    [bigint],
    "view"
  >;

  getTokenAmountUSDT: TypedContractMethod<
    [_amount: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBNBRate: TypedContractMethod<
    [_newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUSDTRate: TypedContractMethod<
    [_newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUSDTToken: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdtToken: TypedContractMethod<[], [string], "view">;

  wallet: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  withdrawErc20: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BNB_rate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDT_rate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyTokenByBNB"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "buyTokenByUSDT"
  ): TypedContractMethod<[_usdtAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTokenAmountBNB"
  ): TypedContractMethod<[_amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenAmountUSDT"
  ): TypedContractMethod<[_amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBNBRate"
  ): TypedContractMethod<[_newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUSDTRate"
  ): TypedContractMethod<[_newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUSDTToken"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdtToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawErc20"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BuyTokenByBNB"
  ): TypedContractEvent<
    BuyTokenByBNBEvent.InputTuple,
    BuyTokenByBNBEvent.OutputTuple,
    BuyTokenByBNBEvent.OutputObject
  >;
  getEvent(
    key: "BuyTokenByUSDT"
  ): TypedContractEvent<
    BuyTokenByUSDTEvent.InputTuple,
    BuyTokenByUSDTEvent.OutputTuple,
    BuyTokenByUSDTEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetBNBRate"
  ): TypedContractEvent<
    SetBNBRateEvent.InputTuple,
    SetBNBRateEvent.OutputTuple,
    SetBNBRateEvent.OutputObject
  >;
  getEvent(
    key: "SetUSDTRate"
  ): TypedContractEvent<
    SetUSDTRateEvent.InputTuple,
    SetUSDTRateEvent.OutputTuple,
    SetUSDTRateEvent.OutputObject
  >;
  getEvent(
    key: "SetUSDTToken"
  ): TypedContractEvent<
    SetUSDTTokenEvent.InputTuple,
    SetUSDTTokenEvent.OutputTuple,
    SetUSDTTokenEvent.OutputObject
  >;

  filters: {
    "BuyTokenByBNB(address,uint256)": TypedContractEvent<
      BuyTokenByBNBEvent.InputTuple,
      BuyTokenByBNBEvent.OutputTuple,
      BuyTokenByBNBEvent.OutputObject
    >;
    BuyTokenByBNB: TypedContractEvent<
      BuyTokenByBNBEvent.InputTuple,
      BuyTokenByBNBEvent.OutputTuple,
      BuyTokenByBNBEvent.OutputObject
    >;

    "BuyTokenByUSDT(address,uint256)": TypedContractEvent<
      BuyTokenByUSDTEvent.InputTuple,
      BuyTokenByUSDTEvent.OutputTuple,
      BuyTokenByUSDTEvent.OutputObject
    >;
    BuyTokenByUSDT: TypedContractEvent<
      BuyTokenByUSDTEvent.InputTuple,
      BuyTokenByUSDTEvent.OutputTuple,
      BuyTokenByUSDTEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetBNBRate(uint256)": TypedContractEvent<
      SetBNBRateEvent.InputTuple,
      SetBNBRateEvent.OutputTuple,
      SetBNBRateEvent.OutputObject
    >;
    SetBNBRate: TypedContractEvent<
      SetBNBRateEvent.InputTuple,
      SetBNBRateEvent.OutputTuple,
      SetBNBRateEvent.OutputObject
    >;

    "SetUSDTRate(uint256)": TypedContractEvent<
      SetUSDTRateEvent.InputTuple,
      SetUSDTRateEvent.OutputTuple,
      SetUSDTRateEvent.OutputObject
    >;
    SetUSDTRate: TypedContractEvent<
      SetUSDTRateEvent.InputTuple,
      SetUSDTRateEvent.OutputTuple,
      SetUSDTRateEvent.OutputObject
    >;

    "SetUSDTToken(address)": TypedContractEvent<
      SetUSDTTokenEvent.InputTuple,
      SetUSDTTokenEvent.OutputTuple,
      SetUSDTTokenEvent.OutputObject
    >;
    SetUSDTToken: TypedContractEvent<
      SetUSDTTokenEvent.InputTuple,
      SetUSDTTokenEvent.OutputTuple,
      SetUSDTTokenEvent.OutputObject
    >;
  };
}
